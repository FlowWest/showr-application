emergence
as_date("2013-08-22") - spawn_date
runApp()
tags$div()
runApp()
augment
library(forecas)
install.packages("forecast")
library(forecast)
?ets
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?withr
??withr
help(package = "withr")
library(withr)
f <- function(x) {
local_envvar(c("WITHR" = 2))
Sys.getenv("WITHR")
}
f
f()
Sys.getenv("WITHR")
x
measurements::conv_unit(12.07, "C", "F")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
IQR(1:10)
IQR(rnorm(100))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
profvis::profvis(shiny::runApp())
feather::read_feather("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather")
feather::read_feather(path = url("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather"))
feather::feather("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather")
shiny::runApp()
source("modules/welcome.R")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
div(class = "front-banner",
div(class = "imgcon"),
div(class = "hcon", h1("The New Zealand"), h1("Tourism Dashboard"))
)
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
historic_water_year_types <- readr::read_rds("data/operations/historical-water-year-index.rds")
current_water_year_tyoes <- readr::read_csv("data/operations/2018-04-17-water-year-index.rds")
current_water_year_tyoes <- readr::read_rdf("data/operations/2018-04-17-water-year-index.rds")
current_water_year_tyoes <- readr::read_rds("data/operations/2018-04-17-water-year-index.rds")
# if a historic year is chosen use the
# hey this person is in the year 2014
historic_water_year_types %>%
filter(year == 2014)
library(dplyr)
library(readr)
# if a historic year is chosen use the
# hey this person is in the year 2014
historic_water_year_types %>%
filter(year == 2014)
class_lookups <- c(
"C" = "critical",
"D" = "dry",
"BN" = "below normal",
"AN" = "above normal",
"W" = "wet"
)
# if a historic year is chosen use the
# hey this person is in the year 2014
historic_water_year_types %>%
filter(year == 2014) %>%
mutate(classification = class_lookups[yr_type])
current_water_year_types <- readr::read_rds("data/operations/2018-04-17-water-year-index.rds")
# if they choose the current year we have to use the current year dataframe
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1)
library(lubridate)
get_year_classification <- function(y) {
if (year != year(today())) {
historic_water_year_types %>%
filter(year == y) %>%
mutate(classification = class_lookups[yr_type]) %>%
pull(classification)
} else {
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1) %>%
pull(classification)
}
}
get_year_classification(2010)
get_year_classification <- function(y) {
if (y != year(today())) {
historic_water_year_types %>%
filter(year == y) %>%
mutate(classification = class_lookups[yr_type]) %>%
pull(classification)
} else {
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1) %>%
pull(classification)
}
}
get_year_classification(2010)
get_year_classification <- function(y) {
if (y != year(today())) {
historic_water_year_types %>%
filter(year == y) %>%
mutate(classification = class_lookups[yr_type]) %>%
pull(classification) %>%
as.character()
} else {
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1) %>%
pull(classification) %>%
as.character()
}
}
get_year_classification(2010)
get_year_classification(2011)
get_year_classification(2012)
get_year_classification(2013)
get_year_classification(2014)
get_year_classification(2015)
get_year_classification(2016)
get_year_classification(2017)
get_year_classification(2018)
# This script populates the data folder with general R object.
# namely just vectors that would otherwise be created and used from the
# global.R file. The purpose is not so much for speed (but it does help a little bit),
# but to keep the global.R file clean, and be able to document each of these
# objects clearly in this file.
# This vector is used to lookup the correct cdec station based on the
# redd reach
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
# This vector is used to lookup the full name of a station for the temp plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_temps <- c(
"kwk" = "Keswick",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta"
)
# This vector is used to lookup the full name of a station for the flow plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_flows <- c(
"kwk" = "Keswick Outflow",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta Inflow",
"wlk" = "Wilkins Slough"
)
# named vector used to zoom in based on the redd selection
# for use in the leaflet map within the chinook page.
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c(40.515936, -122.357771),
"Airport Road Bridge to Balls Ferry Bridge" = c(40.462697, -122.251489),
"Balls Ferry Bridge to Battle Creek" = c(40.380764, -122.199044),
"Battle Creek to Jellys Ferry Bridge" = c(40.331602, -122.210969),
"Jellys Ferry Bridge to Bend Bridge" = c(40.317591, -122.173661),
"Bend Bridge to Red Bluff Diversion Dam" = c(40.203255, -122.218306),
"Red Bluff Diversion Dam to Tehama Bridge" = c(),
"Tehama Bridge to Woodson Bridge" = c(),
"Woodson Bridge to Hamilton City Bridge" = c(),
"Hamilton City Bridge to Old Ferry Bridge" = c()
)
# redd locations, this is used for the selectInput
redd_locations <- names(redd_cdec_lookup)
# convert the one letter codes in cdec to human readable types
wy_class_lookups <- c(
"C" = "critical",
"D" = "dry",
"BN" = "below normal",
"AN" = "above normal",
"W" = "wet"
)
# run this to make the .Rdata object file
save(
redd_cdec_lookup,
station_code_to_name_flows,
station_code_to_name_temps,
redd_reach_center_coords,
redd_locations,
wy_class_lookups,
file = "data/general-objects.RData"
)
get_year_classification <- function(y) {
if (y != year(today())) {
historic_water_year_types %>%
filter(year == y) %>%
mutate(classification = class_lookups[yr_type]) %>%
pull(classification) %>%
as.character()
} else {
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1) %>%
pull(classification) %>%
as.character()
}
}
# run this to make the .Rdata object file
save(
redd_cdec_lookup,
station_code_to_name_flows,
station_code_to_name_temps,
redd_reach_center_coords,
redd_locations,
wy_class_lookups,
get_year_classification,
file = "data/general-objects.RData"
)
load("data/general-objects.RData")
shiny::runApp()
runApp()
# This script populates the data folder with general R object.
# namely just vectors that would otherwise be created and used from the
# global.R file. The purpose is not so much for speed (but it does help a little bit),
# but to keep the global.R file clean, and be able to document each of these
# objects clearly in this file.
# This vector is used to lookup the correct cdec station based on the
# redd reach
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
# This vector is used to lookup the full name of a station for the temp plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_temps <- c(
"kwk" = "Keswick",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta"
)
# This vector is used to lookup the full name of a station for the flow plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_flows <- c(
"kwk" = "Keswick Outflow",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta Inflow",
"wlk" = "Wilkins Slough"
)
# named vector used to zoom in based on the redd selection
# for use in the leaflet map within the chinook page.
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c(40.515936, -122.357771),
"Airport Road Bridge to Balls Ferry Bridge" = c(40.462697, -122.251489),
"Balls Ferry Bridge to Battle Creek" = c(40.380764, -122.199044),
"Battle Creek to Jellys Ferry Bridge" = c(40.331602, -122.210969),
"Jellys Ferry Bridge to Bend Bridge" = c(40.317591, -122.173661),
"Bend Bridge to Red Bluff Diversion Dam" = c(40.203255, -122.218306),
"Red Bluff Diversion Dam to Tehama Bridge" = c(),
"Tehama Bridge to Woodson Bridge" = c(),
"Woodson Bridge to Hamilton City Bridge" = c(),
"Hamilton City Bridge to Old Ferry Bridge" = c()
)
# redd locations, this is used for the selectInput
redd_locations <- names(redd_cdec_lookup)
# convert the one letter codes in cdec to human readable types
wy_class_lookups <- c(
"C" = "critical",
"D" = "dry",
"BN" = "below normal",
"AN" = "above normal",
"W" = "wet"
)
get_year_classification <- function(y) {
if (y != year(today())) {
historic_water_year_types %>%
filter(year == y) %>%
mutate(classification = wy_class_lookups[yr_type]) %>%
pull(classification) %>%
as.character()
} else {
current_water_year_types %>%
filter(probability == 99) %>%
arrange(desc(date)) %>%
head(1) %>%
pull(classification) %>%
as.character()
}
}
# run this to make the .Rdata object file
save(
redd_cdec_lookup,
station_code_to_name_flows,
station_code_to_name_temps,
redd_reach_center_coords,
redd_locations,
wy_class_lookups,
get_year_classification,
file = "data/general-objects.RData"
)
runApp()
historic_water_year_types
historic_water_year_types %>% tibble::add_row(year =2017, yr_type="W")
historic_water_year_types %>% tibble::add_row(year =2017, yr_type="W") %>% tail()
runApp()
runApp()
# summary of days over compliance
redd_data
# summary of days over compliance
temp_data
# summary of days over compliance
temp_data %>%
filter(year(datetime) == 2017)
temp_compliance_points_daily_mean
# summary of days over compliance
temp_compliance_points_daily_mean %>%
filter(year(datetime) == 2017) %>%
mutate(compliance_violation = case_when(
(month(datetime) %in% 5:10 & parameter_value > 56) ~ TRUE,
TRUE ~ FALSE
))
# summary of days over compliance
temp_compliance_points_daily_mean %>%
filter(year(datetime) == 2017) %>%
mutate(compliance_violation = case_when(
(month(datetime) %in% 5:10 & parameter_value > 56) ~ TRUE,
TRUE ~ FALSE
)) %>%
group_by(location_id) %>%
summarise(
days_out = sum(compliance_violation)
)
# summary of days over compliance
temp_compliance_points_daily_mean %>%
filter(year(datetime) == 2014) %>%
mutate(compliance_violation = case_when(
(month(datetime) %in% 5:10 & parameter_value > 56) ~ TRUE,
TRUE ~ FALSE
)) %>%
group_by(location_id) %>%
summarise(
days_out = sum(compliance_violation)
)
# summary of days over compliance
temp_compliance_points_daily_mean %>%
filter(year(datetime) == 2018) %>%
mutate(compliance_violation = case_when(
(month(datetime) %in% 5:10 & parameter_value > 56) ~ TRUE,
TRUE ~ FALSE
)) %>%
group_by(location_id) %>%
summarise(
days_out = sum(compliance_violation)
)
# summary of days over compliance
temp_compliance_points_daily_mean %>%
filter(year(datetime) == 2017) %>%
mutate(compliance_violation = case_when(
(month(datetime) %in% 5:10 & parameter_value > 56) ~ TRUE,
TRUE ~ FALSE
)) %>%
group_by(location_id) %>%
summarise(
days_out = sum(compliance_violation)
)
# days over the flood curve
shasta_storage_data
# days over the flood curve
shasta_storage_data %>% distinct(parameter_id)
CDECRetrieve::cdec_datasets("sha")
CDECRetrieve::cdec_datasets("sha") %>% tail()
parameter_code_to_name <- c(
"15" = "storage",
"94" = "conservation_curve"
)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[parameter_id])
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)])
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
spread(parameter_name, parameter_value)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
selcet(-parameter_id) %>%
spread(parameter_name, parameter_value)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
selcet(-parameter_id) %>%
spread(parameter_name, parameter_value)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2017)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2017) %>%
mutate(in_flood_control = storage > conservation_curve)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2017) %>%
mutate(in_flood_control = storage > conservation_curve) %>%
group_by(location_id) %>%
summarise(
days_in_flood_control = sum(in_flood_control)
)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2017) %>%
mutate(in_flood_control = storage > conservation_curve) %>%
group_by(location_id) %>%
summarise(
days_in_flood_control = sum(in_flood_control, na.rm = TRUE)
)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2014) %>%
mutate(in_flood_control = storage > conservation_curve) %>%
group_by(location_id) %>%
summarise(
days_in_flood_control = sum(in_flood_control, na.rm = TRUE)
)
shasta_storage_data %>%
mutate(parameter_name = parameter_code_to_name[as.character(parameter_id)]) %>%
select(-parameter_id) %>%
spread(parameter_name, parameter_value) %>%
filter(year(datetime) == 2017) %>%
mutate(in_flood_control = storage > conservation_curve) %>%
group_by(location_id) %>%
summarise(
days_in_flood_control = sum(in_flood_control, na.rm = TRUE)
)
redd_data
