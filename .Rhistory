lag_l = lag(lagrange)
)
p <-
x <-   d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
x %>%
select(-lag_l) %>%
ggplot(aes(flow, color=site)) + geom_density()
x %>%
select(-lag_l)
d %>%
ggplot(aes(flow, color=site)) + geom_density()
d %>%
ggplot(aes(flow, fill=site)) + geom_density()
d %>%
ggplot(aes(flow, fill=site)) + geom_density(alpha=0.3)
d %>%
ggplot(aes(flow, fill=site)) + geom_density(alpha=0.3)
p %>%
ggplot(aes(lagrange, mod)) + geom_point()
p %>%
filter(lagrange < 250, mod > 250) %>%
nrow()
p %>%
ggplot(aes(lagrange, mod)) + geom_point()
p %>% filter(mod >250, mod < 300)
p <- d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
p %>%
ggplot(aes(lagrange, mod)) + geom_point()
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
labs(x="Lagrange (cfs)"
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
d <- dplyr::bind_rows(lagr, tuo) %>%
transmute(date = Date, site = ll[site_no], flow = X_00060_00003) %>%
filter(month(date) %in% 8:9,
flow < 600)
p <- d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
p %>% filter(mod >250, mod < 300)
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
d <- dplyr::bind_rows(lagr, tuo) %>%
transmute(date = Date, site = ll[site_no], flow = X_00060_00003) %>%
filter(month(date) %in% 8:9,
flow < 400)
p <- d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
p %>% filter(mod >250, mod < 300)
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
d <- dplyr::bind_rows(lagr, tuo) %>%
transmute(date = Date, site = ll[site_no], flow = X_00060_00003) %>%
filter(month(date) %in% 8:9,
flow < 550)
p <- d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
p %>% filter(mod >250, mod < 300)
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
source('~/Documents/lagrange.R', echo=TRUE)
d
d
p <- d %>%
spread(site, flow) %>%
mutate(
lag_l = lag(lagrange)
)
p
p
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 200) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(aes(yintercept = 200)) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>% p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 200) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 200) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 250, color="red", linetype="d") +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 250, color="red", linetype=6) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 250, color="red", linetype=3) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 250, color="red", linetype=4) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point() +
geom_hline(yintercept = 250, color="red", linetype=5) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>% filter(mod >250, mod < 300)
p %>% filter(mod >250, mod < 300)  %>% knitr::kable()
p %>% filter(mod >250, mod < 300) %>%
select(-lag_l)%>% knitr::kable()
p %>%
ggplot(aes(lagrange, mod)) + geom_point(alpha=0.4) +
geom_hline(yintercept = 250, color="red", linetype=5) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p %>%
ggplot(aes(lagrange, mod)) + geom_point(alpha=0.5) +
geom_hline(yintercept = 250, color="red", linetype=5) +
labs(x="Lagrange (cfs)",
y="Modesto (cfs)")
p
p %>%
ggplot(aes(mod)) + geom_density()
p %>%
ggplot(aes(lagrange)) + geom_density()
p %>%
mutate(flag = mod > 250) %>%
ggplot(aes(lagrange, fill=flag)) + geom_density()
shiny::runApp()
runApp()
runApp()
runApp()
shiny::runApp()
diversion_data
diversion_data %>% filter(year(date) == 2017)
library(lubridate)
diversion_data %>% filter(year(date) == 2017)
diversion_data %>% filter(year(draft_date) == 2017)
diversion_data %>% arrange(draft_date) %>% tail()
runApp()
runApp()
flow_data
flow_data %>%
filter(location == "pmn")
library(shiny)
library(plotly)
library(dplyr)
library(lubridate)
library(DT)
library(leaflet)
library(rgdal)
library(zoo)
library(stringr)
library(readr)
library(tidyr)
library(forcats)
library(readr)
library(sparkline)
library(shinyjs)
library(measurements)
library(purrr)
library(shinytoastr)
flow_data %>%
filter(location == "pmn")
flow_data
flow_data %>%
filter(locatio-d == "pmn")
flow_data %>%
filter(location_id == "pmn")
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
print()
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
ggplot(aes(datetime, parameter_value))
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
ggplot(aes(datetime, parameter_value)) + geom_line()
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
)
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
) %>%
ggplot(aes(datetime, daily_average)) + geom_line()
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
) %>%
ggplot(aes(datetime, daily_average)) + geom_line()
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
) %>%
ggplot(aes(date, daily_average)) + geom_line()
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_median = median(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
) %>%
ggplot(aes(date, daily_median)) + geom_line()
library(CDECRetrieve)
cdec_datasets("psh")
flow_data %>%
filter(location_id == "pmn", year(datetime) == 2018) %>%
group_by(date = as_date(datetime)) %>%
summarise(
daily_average = mean(parameter_value),
daily_median = median(parameter_value),
daily_max = max(parameter_value),
daily_min = min(parameter_value)
) %>%
ggplot(aes(date, daily_max)) + geom_line()
shiny::runApp()
View(historic_water_year_types)
shiny::runApp()
runApp()
install.packages("shinyWidgets")
install.packages("shinyWidgets")
shiny::runApp()
runApp()
runApp()
runApp()
library(shiny)
library(plotly)
library(dplyr)
library(lubridate)
library(DT)
library(leaflet)
library(rgdal)
library(zoo)
library(stringr)
library(readr)
library(tidyr)
library(forcats)
library(readr)
library(sparkline)
library(shinyjs)
library(measurements)
library(purrr)
library(shinytoastr)
library(shinyWidgets)
shiny::runApp()
runApp()
shiny::runApp()
redd_data %>%
filter(year(date) == 2018)
rd %>%
filter(year(date) == 2018)
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar') %>%
layout(barmore = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar') %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
marker=list(color="dark2")) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
marker=list(colors="dark2")) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
marker=list(color=c("#66c2a5", "fc8d62", "8da0cb"))) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
color=c("#66c2a5", "fc8d62", "8da0cb")) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors=c("#66c2a5", "fc8d62", "8da0cb")) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors=c("#66c2a5", "#fc8d62", "#8da0cb")) %>%
layout(barmode = 'stack')
?plot_ly
300 + (500)
120 * 4
30 * 4
300 + 480 + 100
300 + 480
300 + 480 + 595
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors="Set2") %>%
layout(barmode = 'stack')
RColorBrewer::brewer.pal("Set2")
RColorBrewer::brewer.pal(10, "Set2")
dput(RColorBrewer::brewer.pal(10, "Set2"))
?dput
cs <- c("#66C2A5", "#FC8D62", "#8DA0CB", "#E78AC3", "#A6D854", "#FFD92F",
"#E5C494", "#B3B3B3")
cs
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors=cs) %>%
layout(barmode = 'stack')
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors=cs[1:3]) %>%
layout(barmode = 'stack')
cs[]
rd %>%
filter(year(date) == 2018) %>%
plot_ly(x=~date, y=~counts, color=~location, type='bar',
colors=cs) %>%
layout(barmode = 'stack')
shiny::runApp()
leaflet(reaches_to_show_in_map()) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE))
leaflet(redd_reach) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE))
library(leflet)
library(leaflet)
leaflet(redd_reach) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE))
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE))
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
weight = 5)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
weight = 5,
fillColor = ~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
weight = 5,
color = ~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
weight = 5)
?addPolylines
shiny::runApp()
redd_reach
leaflet(redd_reach) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
pal <- colorFactor("Set2", domain = redd_reach$Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color=~pal,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color=~pal(Reach),
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
color=~pal(Reach))
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
color = ~pal(Reach),
highlight = highlightOptions(
weight = 7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
color = ~pal(Reach),
opacity = 1,
highlight = highlightOptions(
weight = 7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
color = ~pal(Reach),
opacity = 1,
highlight = highlightOptions(
weight = 10,
bringToFront = TRUE) )
?colorFactor
RColorBrewer::brewer.pal(5, "Set2")
pal <- colorFactor(RColorBrewer::brewer.pal(5, "Set2"), domain = redd_reach$Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
color = ~pal(Reach),
opacity = 1,
highlight = highlightOptions(
weight = 10,
bringToFront = TRUE) )
pal
runApp()
runApp()
runApp()
View(dashboard_server)
View(compact())
View(compact)
