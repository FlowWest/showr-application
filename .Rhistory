filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
shiny::runApp()
runApp()
profvis::profvis(runApp())
# UPDATE: shiny app just reads from a static site pre-populated with processed data
# TODO: do the same with the fish data in the application
temp_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_hourly_temps.csv")
# UPDATE: shiny app just reads from a static site pre-populated with processed data
# TODO: do the same with the fish data in the application
temp_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_hourly_temps.csv",
col_types = cols(
datetime = col_datetime(format = ""),
location_id = col_character(),
parameter_id = col_integer(),
parameter_value = col_double()
))
temp_data
temp_compliance_points_daily_mean <-
readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.csv")
flow_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_hourly_flows.csv")
flow_data
flow_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_hourly_flows.csv"
)
:
flow_data_daily_mean <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_flow.csv")
shasta_storage_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_ops.csv")
shasta_storage_data <-
readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_ops.csv",
col_types = cols(
datetime = col_date(format = ""),
location_id = col_character(),
parameter_id = col_integer(),
parameter_value = col_double()
))
redd_data <- readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data/cdfw/redds/aerial-survey-observations_no_error_codes.csv") %>%
filter(race == "Winter")
redd_data <-
readr::read_csv("https://s3-us-west-2.amazonaws.com/showr-data/cdfw/redds/aerial-survey-observations_no_error_codes.csv",
col_types = cols(
date = col_date(format = ""),
location = col_character(),
race = col_character(),
counts = col_double()
)) %>% filter(race == "Winter")
6520/1000
profvis::profvis(runApp())
carcass_data
write_rds(carcass_data, path = "data/carcass_static_data.rds")
profvis::profvis(runApp())
profvis::profvis(runApp())
?read_csv2
redd_cdec_lookup
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
redd_cdec_lookup["Keswick to ACID Dam"]
# a vector with names
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
library(profvis)
# a vector with names
profvis({
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)})
save(redd_cdec_lookup, file = "data/testing_data_object")
load("data/testing_data_object")
rm(redd_cdec_lookup)
load("data/testing_data_object")
redd_cdec_lookup
# This vector is used to lookup the correct cdec station based on the
# redd reach
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
# This script populates the data folder with general R object.
# namely just vectors that would otherwise be created and used from the
# global.R file. The purpose is not so much for speed (but it does help a little bit),
# but to keep the global.R file clean, and be able to document each of these
# objects clearly in this file.
# This vector is used to lookup the correct cdec station based on the
# redd reach
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
# This vector is used to lookup the full name of a station for the temp plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_temps <- c(
"kwk" = "Keswick",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta"
)
# This vector is used to lookup the full name of a station for the flow plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_flows <- c(
"kwk" = "Keswick Outflow",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta Inflow",
"wlk" = "Wilkins Slough"
)
save(
redd_cdec_lookup,
station_code_to_name_flows,
station_code_to_name_temps,
file = "data/general-objects.RData"
)
# named vector used to zoom in based on the redd selection
# for use in the leaflet map within the chinook page.
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c(40.515936, -122.357771),
"Airport Road Bridge to Balls Ferry Bridge" = c(40.462697, -122.251489),
"Balls Ferry Bridge to Battle Creek" = c(40.380764, -122.199044),
"Battle Creek to Jellys Ferry Bridge" = c(40.331602, -122.210969),
"Jellys Ferry Bridge to Bend Bridge" = c(40.317591, -122.173661),
"Bend Bridge to Red Bluff Diversion Dam" = c(40.203255, -122.218306),
"Red Bluff Diversion Dam to Tehama Bridge" = c(),
"Tehama Bridge to Woodson Bridge" = c(),
"Woodson Bridge to Hamilton City Bridge" = c(),
"Hamilton City Bridge to Old Ferry Bridge" = c()
)
# This script populates the data folder with general R object.
# namely just vectors that would otherwise be created and used from the
# global.R file. The purpose is not so much for speed (but it does help a little bit),
# but to keep the global.R file clean, and be able to document each of these
# objects clearly in this file.
# This vector is used to lookup the correct cdec station based on the
# redd reach
redd_cdec_lookup <- c(
"Keswick to ACID Dam" = "kwk",
"ACID Dam to Highway 44 Bridge" = "kwk",
"Highway 44 Bridge to Airport Road Bridge" = "ccr",
"Airport Road Bridge to Balls Ferry Bridge" = "and",
"Balls Ferry Bridge to Battle Creek" = "bsf",
"Battle Creek to Jellys Ferry Bridge" = "bsf",
"Jellys Ferry Bridge to Bend Bridge" = "jlf",
"Bend Bridge to Red Bluff Diversion Dam" = "bnd",
"Red Bluff Diversion Dam to Tehama Bridge " = "bnd",
"Tehama Bridge To Woodson Bridge" = "bnd",
"Woodson Bridge to Hamilton City Bridge" = "bnd",
"Hamilton City Bridge to Ord Ferry Bridge" = "bnd",
"Ord Ferry Bridge To Princeton Ferry" ="bnd"
)
# This vector is used to lookup the full name of a station for the temp plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_temps <- c(
"kwk" = "Keswick",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta"
)
# This vector is used to lookup the full name of a station for the flow plots.
# used for plotting in order to show full names in the legend and in the hovers
station_code_to_name_flows <- c(
"kwk" = "Keswick Outflow",
"ccr" = "Clear Creek",
"bsf" = "Balls Ferry",
"jlf" = "Jellys Ferry",
"bnd" = "Bend Bridge",
"sha" = "Shasta Inflow",
"wlk" = "Wilkins Slough"
)
# named vector used to zoom in based on the redd selection
# for use in the leaflet map within the chinook page.
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c(40.515936, -122.357771),
"Airport Road Bridge to Balls Ferry Bridge" = c(40.462697, -122.251489),
"Balls Ferry Bridge to Battle Creek" = c(40.380764, -122.199044),
"Battle Creek to Jellys Ferry Bridge" = c(40.331602, -122.210969),
"Jellys Ferry Bridge to Bend Bridge" = c(40.317591, -122.173661),
"Bend Bridge to Red Bluff Diversion Dam" = c(40.203255, -122.218306),
"Red Bluff Diversion Dam to Tehama Bridge" = c(),
"Tehama Bridge to Woodson Bridge" = c(),
"Woodson Bridge to Hamilton City Bridge" = c(),
"Hamilton City Bridge to Old Ferry Bridge" = c()
)
save(
redd_cdec_lookup,
station_code_to_name_flows,
station_code_to_name_temps,
redd_reach_center_coords,
file = "data/general-objects.RData"
)
runApp()
CDECRetrieve::cdec_query("ccr", "25", "d", "2017-03-01", "2017-11-31")
CDECRetrieve::cdec_query("ccr", "25", "h", "2017-03-01", "2017-11-31")
CDECRetrieve::cdec_query("ccr", "25", "h", "2017-03-01", "2017-11-31")
CDECRetrieve::cdec_query("kwk", "25", "h", "2017-03-01", "2017-11-31")
CDECRetrieve::cdec_datasets("ccr")
CDECRetrieve::cdec_query("ccr", "25", "h", "2017-03-01", "2017-11-01")
CDECRetrieve::cdec_query("ccr", "25", "h", "2017-03-01", "2017-11-01") -> d
d
d %>% group_by(date = as_date(datetime)) %>% summarise(value = mean(parameter_value))
d %>% group_by(date = as_date(datetime)) %>% summarise(value = mean(parameter_value)) %>% ggplot(aes(date, value)) + geom_line()
redd_locations
# redd locations, this is used for the selectInput
redd_locations <- names(redd_cdec_lookup)
carcass_section_to_reach_name
# winter run presence
wr_presence_data <- read_csv("data/wr_chinook_presence.csv")
wr_presence_data
# redd location to cdec location lookup table
redd_to_cdec_location <- read_rds("data/chinook/redd_location_to_cdec_location.rds")
# winter run presence
wr_presence_data <- read_csv("data/chinook/wr_chinook_presence.csv")
redd_to_cdec_location
get_gage_location <- function(redd_location) {
as.character(redd_cdec_lookup[redd_location])
}
get_gage_location("Keswick to ACID Dam")
runApp()
runApp()
235 - 147
fnc <- function(T) .00058 * T - 0.018
fnc
fnc(12)
redd_location <- "Keswick to ACID Dam"
# get the appropriate cdec/cvtemp location
gage <- get_gage_location(redd_location)
gage
temp_data
spawn_date <- "2013-06-01"
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage, date >= spawn_date) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
mutate(atu = cumsum(daily_mean))
gage
spawn_date
spawn_data <- as_date(spawn_date)
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
atu
emergence <- atu %>% filter(atu >= 1724)
emergence
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
atu
emergence <- atu %>% filter(atu >= 1724)
emergence
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
emergence <- atu %>% filter(atu >= 1724)
emergence
atu %>% tail(1)
atu %>% tail(1) %>% pull(atu)
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
atu
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
emergence <- atu %>% filter(atu >= 1724)
atu
atu %>% tail(1) %>% pull()
atu %>% tail(1) %>% pull(atu)
atu
atu %>% filter(daily_mean <= 32)
228 - 140
# functions for automating the calculations of atu's and redd emergence
get_gage_location <- function(redd_location) {
as.character(redd_cdec_lookup[redd_location])
}
# given a date of observation and the location of it, we can estiamte emergence
# using Accumulated Temperature Units
# the logic is simple, use the date of spawn as the start of accumulation
# use the the reach of spawn to select appropriate cdec location.
# summarize cdec temp data to daily mean, and accumulate until the value of 1800 is
# obtained.
estimate_emergence <- function(spawn_date, redd_location) {
# get the appropriate cdec/cvtemp location
gage <- get_gage_location(redd_location)
spawn_data <- as_date(spawn_date)
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(atu = cumsum(daily_mean))
emergence <- atu %>% filter(atu >= 1724)
# if the 'emergence' dataframe is empty then we have not reached
# the emergence value, and must proceed using modeled temp data.
if (nrow(emergence) == 0) {
current_atu <- atu %>% tail(1) %>% pull(atu) # store latest accumulated value
if (length(current_atu) == 0) current_atu <- 0
thresh <- 1724 - current_atu # new thresh will be old thresh minus current atu
model_estimated_emergence <-
model_temps %>%
arrange(datetime) %>%
filter(location_id == gage, datetime >= spawn_date) %>%
mutate(atu = cumsum(temp_50)) %>%
filter(atu >= thresh) %>%
head(1)
# na indicates the model is unable to project that far in the future
# this usually means that the redd was observed TODAY
if (nrow(model_estimated_emergence) == 0) {
return(NA)
} else{
return(model_estimated_emergence %>% pull(datetime))
}
} else {
return(emergence %>% head(1) %>% pull(date))
}
}
estimate_emergence(spawn_date = "2017-06-10", "Keswick to ACID Dam")
estimate_emergence(spawn_date = "2017-06-10", "Keswick to ACID Dam")
as_date("2017-06-10") - estimate_emergence(spawn_date = "2017-06-10", "Keswick to ACID Dam")
install.packages("units")
install.packages("units")
library(units)
install.packages("measurements")
measurements::conv_unit(54.5, from = "faranheit", to = "celsius")
measurements::conv_unit(54.5, from = "F", to = "C")
# get the appropriate cdec/cvtemp location
gage <- get_gage_location(redd_location)
spawn_data <- as_date(spawn_date)
spawn_date <- as_date(spawn_date)
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(daily_mean_C = measurements::conv_unit(daily_mean, "F", "C"),
atu = cumsum(daily_mean_C))
atu
# summarize hourly data to a daily mean
atu <-
temp_data %>%
filter(location_id == gage) %>%
group_by(location_id, date = as_date(datetime)) %>%
summarise(daily_mean = mean(parameter_value, na.rm = TRUE)) %>%
ungroup() %>%
arrange(date) %>%
filter(date >= spawn_date) %>%
mutate(daily_mean_C = measurements::conv_unit(daily_mean, "F", "C"),
atu = cumsum(daily_mean_C))
emergence <- atu %>% filter(atu >= 958)
emergence
as_date("2013-08-22") - spawn_date
runApp()
tags$div()
runApp()
augment
library(forecas)
install.packages("forecast")
library(forecast)
?ets
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?withr
??withr
help(package = "withr")
library(withr)
f <- function(x) {
local_envvar(c("WITHR" = 2))
Sys.getenv("WITHR")
}
f
f()
Sys.getenv("WITHR")
x
measurements::conv_unit(12.07, "C", "F")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
IQR(1:10)
IQR(rnorm(100))
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
profvis::profvis(shiny::runApp())
feather::read_feather("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather")
feather::read_feather(path = url("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather"))
feather::feather("https://s3-us-west-2.amazonaws.com/showr-data-site/showr_tempatures.feather")
