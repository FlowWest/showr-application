title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location)), location, date), x=~date, y=~temp, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location), location, date),
x=~date, y=~temp, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, .keep_all = TRUE), location, date),
x=~date, y=~temp, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
data=arrange(distinct(z, location, .keep_all = TRUE), location, date)
data
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~temp, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~temp, color=~used,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
model_temps %>%
transmute(
datetime,
location_id,
model_temps = temp_50
) %>%
left_join(daily_temps, by=c("datetime"="date", "location_id"="cdec_gage")) %>%
mutate(
temp = ifelse(is.na(daily_mean), model_temps, daily_mean),
used = ifelse(is.na(daily_mean), "model", "actual")
)
# for winter run emergence
daily_temps <- temp_data %>%
group_by(cdec_gage = location_id, date = as_date(datetime)) %>%
summarise(
daily_mean = mean(parameter_value, na.rm = TRUE)
) %>% ungroup()
model_and_daily_temps <- model_temps %>%
transmute(
datetime,
location_id,
model_temps = temp_50
) %>%
left_join(daily_temps, by=c("datetime"="date", "location_id"="cdec_gage")) %>%
mutate(
temp = ifelse(is.na(daily_mean), model_temps, daily_mean),
used = ifelse(is.na(daily_mean), "model", "actual")
)
### NO TEMPERATURE DATA BEFORE 2010!!!!
rd <- redd_data %>%
filter(counts > 0, year(date) >= 2010) %>%
mutate(redd_id = row_number(date)) %>%
rowwise() %>%
do(
tibble(
date = seq(.$date, estimate_emergence(.$date, .$location) -1, by="day"), # this give a sequence from the seed day to the estiamted emergence value
seed_day = .$date,
location = .$location,
counts = .$counts, # how many redds will exist in the water for this time
redd_id = .$redd_id
)
) %>% ungroup() %>%
mutate(cdec_gage = redd_cdec_lookup[location],
location = factor(location, levels = unique(redd_data$location))) %>%
left_join(model_and_daily_temps, by=c("date"="datetime", "cdec_gage"="location_id"))
rd
### NO TEMPERATURE DATA BEFORE 2010!!!!
rd <- redd_data %>%
filter(counts > 0, year(date) >= 2010) %>%
mutate(redd_id = row_number(date)) %>%
rowwise() %>%
do(
tibble(
date = seq(.$date, estimate_emergence(.$date, .$location) -1, by="day"), # this give a sequence from the seed day to the estiamted emergence value
seed_day = .$date,
location = .$location,
counts = .$counts, # how many redds will exist in the water for this time
redd_id = .$redd_id
)
) %>% ungroup() %>%
mutate(cdec_gage = redd_cdec_lookup[location],
location = factor(location, levels = unique(redd_data$location))) %>%
left_join(daily_temps)
rd
model_temps
max_daily_temp <- max(daily_temps$date)
max_daily_temp
max_daily_temp <- max(daily_temps$date, na.rm = TRUE)
max_daily_temp
model_temps %>% filter(datetime > max_daily_temp)
daily_temps
model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
datetime = date,
location_id = cdec_gage,
daily_mean = temp_50
)
model_temp_to_append <- model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
`datetime` = date,
location_id = cdec_gage,
daily_mean = temp_50
)
model_temps %>% filter(datetime > max_daily_temp)
model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
location_id = cdec_gage,
daily_mean = temp_50
)
model_temps %>% filter(datetime > max_daily_temp)
model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
date = datetime,
cdec_gage = location_id,
daily_mean = temp_50
)
model_temp_to_append <- model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
date = datetime,
cdec_gage = location_id,
daily_mean = temp_50
)
bind_rows(
daily_temps,
model_temp_to_append
)
daily_temps <- bind_rows(
daily_temps,
model_temp_to_append
)
### NO TEMPERATURE DATA BEFORE 2010!!!!
rd <- redd_data %>%
filter(counts > 0, year(date) >= 2010) %>%
mutate(redd_id = row_number(date)) %>%
rowwise() %>%
do(
tibble(
date = seq(.$date, estimate_emergence(.$date, .$location) -1, by="day"), # this give a sequence from the seed day to the estiamted emergence value
seed_day = .$date,
location = .$location,
counts = .$counts, # how many redds will exist in the water for this time
redd_id = .$redd_id
)
) %>% ungroup() %>%
mutate(cdec_gage = redd_cdec_lookup[location],
location = factor(location, levels = unique(redd_data$location))) %>%
left_join(daily_temps)
z <- rd %>% filter(year(date) == 2018)
rd
z <- rd %>% filter(year(date) == 2018)
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~temp, color=~daily_mean,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, colors=RColorBrewer::brewer.pal(5, "Dark2")) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, line = list(dash='dash')) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE, line = list(dash='dot')) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
z
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~cdec_gage,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~cdec_gage,
yaxis="y2", type='scatter', mode='lines',
inherit = T) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~cdec_gage,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
# for winter run emergence
daily_temps <- temp_data %>%
group_by(cdec_gage = location_id, date = as_date(datetime)) %>%
summarise(
daily_mean = mean(parameter_value, na.rm = TRUE)
) %>% ungroup() %>%
mutate(temp_type="actual")
model_temp_to_append <- model_temps %>% filter(datetime > max_daily_temp) %>%
transmute(
date = datetime,
cdec_gage = location_id,
daily_mean = temp_50,
temp_type="model"
)
daily_temps <- bind_rows(
daily_temps,
model_temp_to_append
)
daily_temps
### NO TEMPERATURE DATA BEFORE 2010!!!!
rd <- redd_data %>%
filter(counts > 0, year(date) >= 2010) %>%
mutate(redd_id = row_number(date)) %>%
rowwise() %>%
do(
tibble(
date = seq(.$date, estimate_emergence(.$date, .$location) -1, by="day"), # this give a sequence from the seed day to the estiamted emergence value
seed_day = .$date,
location = .$location,
counts = .$counts, # how many redds will exist in the water for this time
redd_id = .$redd_id
)
) %>% ungroup() %>%
mutate(cdec_gage = redd_cdec_lookup[location],
location = factor(location, levels = unique(redd_data$location))) %>%
left_join(daily_temps)
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~temp_type,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
z <- rd %>% filter(year(date) == 2018)
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~temp_type,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar') %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location, colors=c("red", "blue", "green"),
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar', inherit = FALSE) %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location, colors=c("red", "blue", "green"),
name=~cdec_gage,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
shiny::runApp()
temp_data
isothermal_data
isothermal_data %>% filter(year(date) == 2017)
isothermal_data %>% filter(year(date) == 2017) %>%
left_join(transmute(
temp_data,
date = as_date(datetime),
location_id,
parameter_value
))
x <- isothermal_data %>% filter(year(date) == 2017) %>%
left_join(transmute(
temp_data,
date = as_date(datetime),
location_id,
parameter_value
))
library(ggplot2)
x %>% filter(temp < 50) %>% ggplot(aes(volume_taf, parameter_value))
x %>% filter(temp < 50) %>% ggplot(aes(volume_taf, parameter_value)) + geom_point()
x %>% filter(temp < 50) %>% ggplot(aes(volume_taf, parameter_value)) + geom_jitter()
z <- rd %>% filter(year(date) == 2018)
plot_ly() %>%
add_bars(data=z, x=~date, y=~counts, color=~location, type='bar', inherit = FALSE) %>%
add_trace(data=arrange(distinct(z, location, date, .keep_all = TRUE), location, date),
x=~date, y=~daily_mean, color=~location, colors=c("red", "blue", "green"),
name=~cdec_gage,
yaxis="y2", type='scatter', mode='lines',
inherit = FALSE) %>%
layout(barmode="stack",
yaxis2 = list(
overlaying = "y",
side = "right",
title = "Temperatures"
))
library(CDECRetrieve)
cdec_datasets("KWK")
cdec_datasets("CCR")
cdec_datasets("ccr")
cdec_datasets("bsf")
cdec_datasets("dfa")
cdec_datasets("asd")
cdec_datasets("sda")
cdec_datasets("cdc")
CDECRetrieve::cdec_datasets("red")
reprex(mean(rnorm(10)))
library(reprex)
reprex(mean(rnorm(10)))
library(feather)
library(shiny)
actionButton()
actionButton("myID")
actionButton("myID", "myLabel")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
actionButton("myID", "myLabel")
runApp()
runApp()
?actionBttn
?actionButton
runApp()
runApp()
12 %% 2
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?dateInput
runApp()
runApp()
shasta_storage_data %>% filter(year(datetime) == year("2018-01-05"))
shasta_storage_data %>% filter(year(datetime) == year("2018-01-05"), datetime <= "2018-01-05")
shasta_storage_data %>% filter(year(datetime) == year("2018-01-05"), datetime <= "2018-01-05") %>% spread(parameter_id, parameter_value)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
