str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   (SVI)")
raw_page[43]
str_split(raw_page[43], " ")
str_split(raw_page[43], "\t")
str_split(raw_page[43], "")
raw_page %>%
str_match("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   (SVI)")
raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   (SVI)")
raw_page %>%
str_detect("Forecast")
raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE")
source('~/.active-rstudio-document', echo=TRUE)
raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE") %>%
which()
raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
table_heading_start <- function(raw_page){
raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
}
table_heading_start(raw_page)
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
c(start:end)
}
table_content_index(raw_page)
raw_page[table_content_index(raw_page)]
raw_page[table_content_index(raw_page)]
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
list(
fulltable = c(start:end)
datatable = c(start+5:end)
)
}
raw_page[table_content_index(raw_page)$datatable]
table_content_index(raw_page)
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
list(
fulltable = c(start:end)
datatable = c(start+5:end)
)
}
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
list(
fulltable = c(start:end)
datatable = c((start+5):end)
)
}
list(
fulltable = c(start:end),
datatable = c(start+5:end)
)
list(
fulltable = c(start:end),
datatable = c((start+5):end)
)
list(
"fulltable" = c(start:end),
"datatable" = c((start+5):end)
)
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
list(
"fulltable" = c(start:end),
"datatable" = c((start+5):end)
)
}
raw_page[table_content_index(raw_page)$datatable]
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
c((start+5):end)
}
raw_page[table_content_index(raw_page)$datatable]
raw_page[table_content_index(raw_page)]
library(purrr)
s <- str_split(x, "  ")
t <- raw_page[table_content_index(raw_page)][1]
t
str_split(t, "   ")
str_split(t, "    ")
str_split(t, "     ")
str_match(t, "([0-9]+\\.[0-9]+)")
str_match_all(t, "([0-9]+\\.[0-9]+)")
str_extract_all(t, "([0-9]+\\.[0-9]+)")
str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+")
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlit(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals
)
})
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals
)
})
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals
)
}) %>%
spread(date, vals)
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(date, vals)
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
})
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(probs_of_excedence, vals)
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>% View()
raw_page
t
raw_page[table_content_index(raw_page)]
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(t, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
})
raw_page[table_content_index(raw_page)]
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(x, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(probs_of_excedence, vals)
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(x, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(probs_of_excedence, vals)
library(purrr)
library(rvest)
library(stringr)
# water year type classification
# Year Type Classification:     Index based on flow in million acre-feet:
# Wet                           Equal to or greater than 9.2
# Above Normal                  Greater than 7.8, and less than 9.2
# Below Normal                  Greater than 6.5, and equal to or less than 7.8
# Dry                           Greater than 5.4, and equal to or less than 6.5
# Critical                      Equal to or less than 5.4
parse_wsi <- function() {
raw_page <- read_html("http://cdec.water.ca.gov/reportapp/javareports?name=wsi") %>%
html_nodes("pre") %>%
html_text() %>%
str_split("\n") %>%
.[[1]]
table_content_index <- function(raw_page){
start <- raw_page %>%
str_detect("SACRAMENTO VALLEY WATER YEAR TYPE INDEX  40-30-30   \\(SVI\\)") %>%
which()
end <- start + 9
c((start+5):end)
}
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(x, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
vals,
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(probs_of_excedence, vals)
}
parse_wsi()
raw_page[table_content_index(raw_page)] %>%
map_df(function(x) {
date <- unlist(str_extract_all(x, "[A-Za-z]+ [0-9]+, [0-9]+"))
vals <- unlist(str_extract_all(x, "([0-9]+\\.[0-9]+)"))
tibble(
date,
index_vals = as.numeric(vals),
probs_of_excedence = c("99%", "90%", "75%", "50%", "25%", "10%")
)
}) %>%
spread(probs_of_excedence, index_vals)
classify_index <- function(index) {
if (index > 9.2) "wet"
else if (index > 7.8) "above normal"
else if (index > 6.5) "below normal"
else if (index > 5.4) "dry"
else if (index <= 5.4) "critical"
else NA
}
classify_index(7.9)
classify_index(7.1)
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
current_water_year_types
shiny::runApp()
runApp()
runApp()
redd_data
runApp()
runApp()
runApp()
runApp()
runApp()
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines()
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(color =~ Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(color =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fillColor =~ Reach, label=~Reach)
?addPolylines
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=TRUE, fillColor =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=TRUE, fillColor =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=TRUE, fillColor =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=FALSE, fillColor =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=FALSE, color =~ Reach, label=~Reach)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=FALSE, color =~ Reach, label=~Reach, stroke = TRUE)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(fill=FALSE, color =~ Reach, label=~Reach, stroke = TRUE,
weight = 5)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, stroke = TRUE,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
highlight = highlightOptions(
weight = 5,
color = "#666",
dashArray = "",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
highlight = highlightOptions(
weight = 5,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach,
highlight = highlightOptions(
weight = 5,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 10,
highlight = highlightOptions(
weight = 5,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 4,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) )
runApp()
runApp()
runApp()
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) ) %>%
addLegend(values =~Reach)
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) ) %>%
addLegend(values =~Reach, colors = "Dark2")
pal <- colorFactor(
palette = "Dark2",
domain = redd_reach$Reach
)
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) ) %>%
addLegend(values =~Reach, colors = "Dark2", pal = pal)
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) ) %>%
addLegend(values =~Reach, pal = pal)
leaflet(redd_reach) %>%
addTiles() %>%
addPolylines(label=~Reach, weight = 5,
highlight = highlightOptions(
weight = 7,
color = "red",
fillOpacity = 0.7,
bringToFront = TRUE) ) %>%
addLegend(values =~Reach, pal = pal)
shiny::runApp()
redd_reach$Reach
rd %>% distinct(location) %>% pull()
rd
runApp()
rd
rd %>% filter(seed_day == "2010-06-03")
rd
rd %>% filter(seed_day == "2010-06-03")
r <- rd %>% filter(seed_day == "2010-06-03")
# how many stations?
nrow(distinct(r, location))
# how many stations?
no_plots <- nrow(distinct(r, location))
no_plots
# what stations?
stas <- pull(distinct(rd, location))
stas
# what stations?
stas <- as.character(pull(distinct(rd, location)))
stas
# what stations?
stas1 <- as.character(pull(distinct(rd, location)))
r2 <- rd %>% filter(seed_day == "2018-07-12")
r2
stas2 <- as.character(pull(distinct(r2, location)))
stas2
l <- list()
append(l, 1)
l = append(l, 1)
l
l = append(l, 2)
l
runApp()
a = 1
b = 2
c = 3
l <- list()
l <- append(a)
l <- append(l, a)
l
l <- append(l, b)
l
kp <- NULL; ap <- NULL; bp <- NULL; bap <- NULL;
kp
list(kp, ap)
x <- list(kp, ap)
x
runApp()
runApp()
runApp()
runApp()
p <- list(a=NULL, b=1, c = 2)
p
p <- list(NULL,1, 2)
p
p[which(!is.null(p))]
p[which(is.null(p))]
p[[which(is.null(p))]]
compact <- function(x) {
empty <- vapply(x, is_empty, logical(1))
x[!empty]
}
is_empty <- function(x) length(x) == 0
p
compact(p)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
library(lubridate)
leap_year(1982)
days_in_month(2)
runApp()
runApp()
runApp()
