)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup()
7/4
7/5
redd_data %>%
filter(year(date) == as.numeric(2016),
counts > 0) %>%
rowwise() %>%
do(tibble(
spawn_date = .$date,
spawn_location = .$location,
spawn_total = .$counts,
cdec_location = redd_cdec_lookup[.$location],
estimated_emergence = estimate_emergence(.$date, .$location)
)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup() %>%
rowwise() %>%
do(
tibble(
spawn_id = .$spawn_id,
spawn_date = .$spawn_date,
spawn_location = .$spawn_location,
spawn_total = .$spawn_total,
cdec_location = .$cdec_location,
estimated_emergence = .$estimated_emergence,
daily_temp = {
pull(filter(selected_temp_data(), location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), daily_mean)
},
temp_date = {
pull(filter(selected_temp_data(), location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), date)
}
)
) %>% ungroup()
redd_data %>%
filter(year(date) == as.numeric(2016),
counts > 0) %>%
rowwise() %>%
do(tibble(
spawn_date = .$date,
spawn_location = .$location,
spawn_total = .$counts,
cdec_location = redd_cdec_lookup[.$location],
estimated_emergence = estimate_emergence(.$date, .$location)
)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup() %>%
rowwise() %>%
do(
tibble(
spawn_id = .$spawn_id,
spawn_date = .$spawn_date,
spawn_location = .$spawn_location,
spawn_total = .$spawn_total,
cdec_location = .$cdec_location,
estimated_emergence = .$estimated_emergence,
daily_temp = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), daily_mean)
},
temp_date = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), date)
}
)
) %>% ungroup()
redd_data %>%
filter(year(date) == as.numeric(2016),
counts > 0) %>%
rowwise() %>%
do(tibble(
spawn_date = .$date,
spawn_location = .$location,
spawn_total = .$counts,
cdec_location = redd_cdec_lookup[.$location],
estimated_emergence = estimate_emergence(.$date, .$location)
)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup() %>%
rowwise() %>%
do(
tibble(
spawn_id = .$spawn_id,
spawn_date = .$spawn_date,
spawn_location = .$spawn_location,
spawn_total = .$spawn_total,
cdec_location = .$cdec_location,
estimated_emergence = .$estimated_emergence,
daily_temp = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), daily_temp)
},
temp_date = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), date)
}
)
) %>% ungroup()
redd_data %>%
filter(year(date) == as.numeric(2016),
counts > 0) %>%
rowwise() %>%
do(tibble(
spawn_date = .$date,
spawn_location = .$location,
spawn_total = .$counts,
cdec_location = redd_cdec_lookup[.$location],
estimated_emergence = estimate_emergence(.$date, .$location)
)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup() %>%
rowwise() %>%
do(
tibble(
spawn_id = .$spawn_id,
spawn_date = .$spawn_date,
spawn_location = .$spawn_location,
spawn_total = .$spawn_total,
cdec_location = .$cdec_location,
estimated_emergence = .$estimated_emergence,
daily_temp = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), daily_temp)
},
temp_date = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), date)
}
)
) %>% ungroup() %>% View()
runApp()
runApp()
runApp()
runApp()
runApp()
this_redd_data <- redd_data %>%
filter(year(date) == as.numeric(2016),
counts > 0) %>%
rowwise() %>%
do(tibble(
spawn_date = .$date,
spawn_location = .$location,
spawn_total = .$counts,
cdec_location = redd_cdec_lookup[.$location],
estimated_emergence = estimate_emergence(.$date, .$location)
)) %>% ungroup() %>%
left_join(this_temp_data, by = c("spawn_date" = "date", "cdec_location" = "location_id")) %>%
mutate(spawn_id = as.character(group_indices(., spawn_date, spawn_location))) %>%
ungroup() %>%
rowwise() %>%
do(
tibble(
spawn_id = .$spawn_id,
spawn_date = .$spawn_date,
spawn_location = .$spawn_location,
spawn_total = .$spawn_total,
cdec_location = .$cdec_location,
estimated_emergence = .$estimated_emergence,
daily_temp = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), daily_temp)
},
temp_date = {
pull(filter(this_temp_data, location_id == .$cdec_location,
date >= .$spawn_date, date <= .$estimated_emergence), date)
}
)
) %>% ungroup()
this_redd_data
this_redd_data
this_redd_data %>%
attributes()
this_redd_data %>%
filter(spawn_id == "1")
this_redd_data %>%
filter(spawn_id == "1") %>%
plot_ly(x=~spawn_date,
y=~daily_temp, type='scatter', mode='markers')
this_redd_data %>%
filter(spawn_id == "1") %>%
distinct(spawn_id, .keep_all = TRUE)
this_redd_data %>%
filter(spawn_id == "1", spawn_date == temp_date) %>%
this_redd_data %>%
filter(spawn_id == "1", spawn_date == temp_date)
this_redd_data %>%
filter(spawn_id == "1", spawn_date == temp_date)
runApp()
station_code_to_name_flows
hasName(station_code_to_name_flows)
attributes(station_code_to_name_flows)
hasName
this_redd_data
row.names(this_redd_data) <- NULL
this_redd_data
this_redd_data %>% filter(spawn_id %in% 1:2)
this_redd_data %>% filter(spawn_id %in% 1:2, spawn_date == temp_date)
this_redd_data %>% filter(spawn_id %in% 1:2, spawn_date == temp_date)  %>% plot_ly() %>% add_markers(x=~spawn_date, daily_temp)
this_redd_data %>% filter(spawn_id %in% 1:2, spawn_date == temp_date)  %>% plot_ly() %>% add_markers(x=~spawn_date, y=~daily_temp)
this_redd_data %>%
filter(spawn_id %in% 1:2, spawn_date == temp_date)  %>%
plot_ly() %>% add_markers(x=~spawn_date, y=~daily_temp)
this_redd_data %>%
filter(spawn_id %in% 1:2, spawn_date == temp_date)  %>%
plot_ly() %>%
add_markers(x=~spawn_date, y=~daily_temp) %>%
add_markers(x=~estimated_emergence, y=~daily_temp)
spawn_emergence <- this_redd_data %>%
filter(estimated_emergence == temp_date)
spawn_emergence
spawn_emergence <- this_redd_data %>%
filter(estimated_emergence == temp_date) %>%
select(spawn_id, spawn_location, estimated_emergence, daily_temp)
redd_emergence <- this_redd_data %>%
filter(estimated_emergence == temp_date) %>%
select(spawn_id, spawn_location, estimated_emergence, daily_temp)
redd_spawn <- this_redd_data %>%
filter(spawn_date == temp_date) %>%
select(spawn_id, spawn_location, spawn_date, daily_temp)
redd_spawn
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp)
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location)
redd_temps
this_redd_data
this_redd_data
redd_emergence
redd_spawn
redd_temps <- this_redd_data
redd_temps
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp)
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp,
color=~spawn_id)
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp,
color=~spawn_location)
redd_emergence <- this_redd_data %>%
filter(spawn_id == "1") %>%
filter(estimated_emergence == temp_date) %>%
select(spawn_id, spawn_location, estimated_emergence, daily_temp)
redd_spawn <- this_redd_data %>%
filter(spawn_id == "1",
spawn_date == temp_date) %>%
select(spawn_id, spawn_location, spawn_date, daily_temp)
redd_temps <- this_redd_data
redd_temps <- this_redd_data %>%
filter(spawn_id == "1")
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp,
color=~spawn_location)
redd_emergence <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3")) %>%
filter(estimated_emergence == temp_date) %>%
select(spawn_id, spawn_location, estimated_emergence, daily_temp)
redd_spawn <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3"),
spawn_date == temp_date) %>%
select(spawn_id, spawn_location, spawn_date, daily_temp)
redd_temps <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3"))
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp,
color=~spawn_location)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
redd_temps %>%
filter(daily_temp > 50)
redd_temps %>%
filter(daily_temp > 55)
redd_temps %>%
filter(daily_temp > 53)
redd_temps %>%
filter(daily_temp > 53) %>%
group_by(spawn_id) %>%
summarise(
start_of_violation = min(spawn_date),
end_of_violation = max(spawn_date)
)
redd_emergence <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3", "4", "5")) %>%
filter(estimated_emergence == temp_date) %>%
select(spawn_id, spawn_location, estimated_emergence, daily_temp)
redd_spawn <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3", "4", "5"),
spawn_date == temp_date) %>%
select(spawn_id, spawn_location, spawn_date, daily_temp)
redd_temps <- this_redd_data %>%
filter(spawn_id %in% c("1", "2", "3", "4", "5"))
redd_temps %>%
filter(daily_temp > 53) %>%
group_by(spawn_id) %>%
summarise(
start_of_violation = min(spawn_date),
end_of_violation = max(spawn_date)
)
plot_ly() %>%
add_markers(data=redd_spawn, x=~spawn_date, y=~daily_temp,
color=~spawn_location) %>%
add_lines(data=redd_temps, x=~temp_date, y=~daily_temp,
color=~spawn_location)
redd_temps %>%
filter(daily_temp > 53) %>%
group_by(spawn_id) %>%
summarise(
start_of_violation = min(spawn_date),
end_of_violation = max(temp_date)
)
redd_temps
View(redd_temps)
redd_temps %>%
filter(daily_temp > 53) %>%
group_by(spawn_id) %>%
summarise(
start_of_violation = min(spawn_date),
end_of_violation = max(temp_date)
)
redd_temps %>%
filter(daily_temp > 53)
redd_temps %>%
filter(daily_temp > 53) %>%
distinct(spawn_id)
redd_temps %>%
filter(daily_temp > 52) %>%
distinct(spawn_id)
redd_temps %>%
filter(daily_temp > 53) %>%
distinct(spawn_id)
temp_violation_ids <- redd_temps %>%
filter(daily_temp > 53) %>%
distinct(spawn_id)
temp_violation_ids <- redd_temps %>%
filter(daily_temp > 53) %>%
distinct(spawn_id) %>%
pull()
temp_violation_ids
this_redd_data %>%
filter(spawn_id %in% temp_violation_ids)
this_redd_data %>%
filter(spawn_id %in% temp_violation_ids)
this_redd_data %>%
filter(spawn_id %in% temp_violation_ids) %>%
group_by(spawn_id) %>%
summarise(
total_days_out_of_compliance  = sum(daily_temp > 53)
)
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
library(shiny)
library(shinyBS)
shinyApp(
ui =
fluidPage(
sidebarLayout(
sidebarPanel(textInput("num1", NULL, value = 100),
"divided by", textInput("num2", NULL, value = 20),
"equals", textOutput("exampleOutput")),
mainPanel(
bsAlert("alert")
)
)
),
server =
function(input, output, session) {
output$exampleOutput <- renderText({
num1 <- as.numeric(input$num1)
num2 <- as.numeric(input$num2)
if(is.na(num1) | is.na(num2)) {
createAlert(session, "alert", "exampleAlert", title = "Oops",
content = "Both inputs should be numeric.", append = FALSE)
} else if(num2 == 0) {
createAlert(session, "alert", "exampleAlert", title = "Oops",
content = "You cannot divide by 0.", append = FALSE)
} else {
closeAlert(session, "exampleAlert")
return(num1/num2)
}
})
}
)
runApp()
runApp()
runApp()
interactive()
redd_reach@data$Reach
# redd reaches center coords
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c()
)
redd_reach_center_coords[["Keswicj to ACID Dam"]]
redd_reach_center_coords[["Keswick to ACID Dam"]]
redd_reach_center_coords[["Keswick to ACID Dam"]][1]
redd_reach_center_coords[["Keswick to ACID Dam"]][2]
# redd reaches center coords
redd_reach_center_coords <- list(
"Keswick to ACID Dam" = c(40.597215, -122.439403),
"ACID Dam to Highway 44 Bridge" = c(40.592037, -122.373396),
"Highway 44 Bridge to Airport Road Bridge" = c(40.515936, -122.357771),
"Airport Road Bridge to Balls Ferry Bridge" = c(40.411507, -122.192144),
"Balls Ferry Bridge to Battle Creek" = c()
)
redd_reach_center_coords[[redd_reach@data$Reach[1]]]
redd_reach_center_coords[[redd_reach@data$Reach[2]]]
redd_reach_center_coords[[redd_reach@data$Reach[3]]]
redd_reach_center_coords[[redd_reach@data$Reach[4]]]
redd_reach_center_coords[[redd_reach@data$Reach[5]]]
redd_reach_center_coords[[redd_reach@data$Reach[6]]]
runApp()
shiny::runApp()
runApp()
shiny::runGist("https://gist.github.com/haozhu233/9e675e1a8a1bb4744f9ebc9246a2366b")
runApp()
CDECRetrieve::cdec_stations(nearby_city = "Shasta")
CDECRetrieve::cdec_datasets("msc")
mcs_precip <- CDECRetrieve::cdec_query("msc", "45", "2017-10-01")
mcs_precip <- CDECRetrieve::cdec_query("msc", "45", "d", "2017-10-01")
mcs
mcs_precip
CDECRetrieve::cdec_datasets("msc")
mcs_accum <- CDECRetrieve::cdec_query("msc", "2", "m", "2017-10-01")
mcs_accum
mcs_precip %>%
group_by(month(datetime)) %>%
summarise(
accum = sum(parameter_value)
)
mcs_precip %>%
group_by(month(datetime)) %>%
summarise(
accum = sum(parameter_value, na.rm = TRUE)
)
mcs_precip %>%
group_by(month.abb[month(datetime)]) %>%
summarise(
accum = sum(parameter_value, na.rm = TRUE)
)
mcs_accum
mcs_precip %>%
filter(parameter_value > 0) %>%
group_by(month.abb[month(datetime)]) %>%
summarise(
accum = sum(parameter_value, na.rm = TRUE)
)
library(CDECRetrieve)
cdec_stations(nearby_city = "shasta")
cdec_stations(nearby_city = "mineral")
cdec_datasets("min")
library(httr)
library(tidyverse)
url <- "https://community.rstudio.com/directory_items.json?period=weekly&order=likes_received"
req <- httr::GET(url)
stop_for_status(req)
con <- httr::content(req)
users_raw <- con$directory_items
users_raw
users <- tibble(
name = users_raw %>% map_chr(c("user", "username")),
likes = users_raw %>% map_int("likes_received"),
title = users_raw %>% map_chr(c("user", "title"), .default = NA)
)
users
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
users %>%
filter(is.na(title)) %>%
select(-title) %>%
sample_n(5, weight = likes)
